#define match_ist_hits
#ifndef StPicoMcAnaMaker_h
#define StPicoMcAnaMaker_h
/* **************************************************
 *
 *  PicoDst analysis code for simulation studies
 *
 *  Authors:
 * 
 *    **Michael Lomnitz (mrlomnitz@lbl.gov)
 *
 *  ** Code Maintainer
 *
 * **************************************************/
#include "StMaker.h"

#include "StarClassLibrary/StThreeVectorF.hh"
#include "StEvent/StDcaGeometry.h"

#include "StPicoDstMaker/StPicoEvent.h"
#include "StPicoDstMaker/StPicoTrack.h"
#include "StPicoDstMaker/StPicoMcTrack.h"
#include "StRefMultCorr/StRefMultCorr.h"

#include "StPicoMcAnaMaker/StPicoMcAnaHists.h"
//class StThreeVectorF;
class StPicoDst;
class StPicoDstMaker;
class StPicoEvent;
class StPicoMcEvent;
class StPicoTrack;
class StPicoMcTrack;
class TString;
class TH1F;
class TH2F;
class TTree;
class StDcaGeometry;
class StPicoMcAnaHists;
class StRefMultCorr;

class StPicoMcAnaMaker : public StMaker
{
 public: 
  //Overloaded constructor for simu/data
  StPicoMcAnaMaker(const char *name, const char *outname, StPicoDstMaker *picoMaker);
  StPicoMcAnaMaker(const char *name, const char *outname, StPicoDstMaker *picoMaker, StRefMultCorr *grefmultCorrUtil);
  //
  virtual ~StPicoMcAnaMaker(){;};  
  virtual Int_t Init();
  virtual Int_t Make();
  virtual Int_t Finish();
  //
  bool isGoodEvent(StPicoEvent *event);
  bool isGoodEvent_Tight(StPicoEvent *event);
  bool isGoodTrack(StPicoTrack const * const trk, StPicoEvent const * const evt);
  bool isGoodTrack_Tight(StPicoTrack const * const trk, StPicoEvent const * const evt);
  bool isPion(StPicoMcTrack const * const trk);

 private:
  StPicoDstMaker   *mPicoDstMaker;
  StPicoDst        *mPicoDst;
  StPicoMcAnaHists *mHists;
  //For DATA
  StRefMultCorr  *mGRefMultCorrUtil;
  ClassDef(StPicoMcAnaMaker, 1)
 };
// -----------------------------
inline bool StPicoMcAnaMaker::isGoodEvent(StPicoEvent *event)
{
  bool good_VPD = true;
  StThreeVectorF vertexPos = event->primaryVertex();
  if( mGRefMultCorrUtil ){
    bool isVPDMB5p = false;
    for (int i = 0; i < 5; i++){
      if (event->triggerWord() & (1 << i)) isVPDMB5p = true ;  //Select MB trigger
    }
    good_VPD = TMath::Abs(vertexPos.z() - event->vzVpd()) > 3 && isVPDMB5p;
#ifdef match_ist_hits
  bool istHits = event->numberOfIstHits() < 2200.0 && event->numberOfIstHits() > 1600.0;
#else
  bool istHits = true;
#endif
  float vr = std::sqrt(std::pow(event->primaryVertex().x(),2.0) + std::pow(event->primaryVertex().y(),2.0));
  return( fabs(event->primaryVertex().z())<6.0 && vr < 2.0 && istHits && good_VPD);
}
// -----------------------------
inline bool StPicoMcAnaMaker::isGoodEvent_Tight(StPicoEvent *event)
{
  float vr = std::sqrt(std::pow(event->primaryVertex().x(),2.0) + std::pow(event->primaryVertex().y(),2.0));
  return( fabs(event->primaryVertex().z())<4.0 && vr < 2.0);
}
// -----------------------------
inline bool StPicoMcAnaMaker::isPion(StPicoMcTrack const * const trk)
{
  bool pion = trk->GePid()==8 || trk->GePid()==9;
  return (pion && trk->tpcCommon()>=10); 
}
// -----------------------------
inline bool StPicoMcAnaMaker::isGoodTrack(StPicoTrack const * const trk, StPicoEvent const * const evt)
{
  StThreeVectorF pVtx = evt->primaryVertex();
  float B = evt->bField();
  StThreeVectorF mom = trk->gMom(pVtx,B);
  //StThreeVectorF dca = trk->dcaGeometry().origin();
  StPhysicalHelixD helix = trk->dcaGeometry().helix();
  double dca = helix.geometricSignedDistance(pVtx);
  //dca XY and dcaZ cut only on HFT?
  return( trk->nHitsFit()>=20 && std::fabs(mom.pseudoRapidity())<=1.0 &&
	  mom.perp()>0.2 && TMath::Abs(dca)<1.5 /*&& TMath::Abs(dcaXy)<1.0 && 
						  TMath::Abs(dcaZ)<1.0*/);
}
// -----------------------------
inline bool StPicoMcAnaMaker::isGoodTrack_Tight(StPicoTrack const * const trk, StPicoEvent const * const evt)
{
  StThreeVectorF pVtx = evt->primaryVertex();
  float B = evt->bField();
  StThreeVectorF mom = trk->gMom(pVtx,B);
  //StThreeVectorF dca = trk->dcaGeometry().origin();
  StPhysicalHelixD helix = trk->dcaGeometry().helix();
  double dca = helix.geometricSignedDistance(pVtx);
  double dcaXy = helix.geometricSignedDistance(pVtx.x(), pVtx.y());
  StThreeVectorF dcaPoint = helix.at(helix.pathLength(pVtx.x(), pVtx.y()));
  double dcaZ = dcaPoint.z() - pVtx.z();
  return( trk->nHitsFit()>=20 && std::fabs(mom.pseudoRapidity())<=0.4 &&
	  mom.perp()>0.2 && TMath::Abs(dca)<1.5 /*&& TMath::Abs(dcaXy)<1.0 && 
						  TMath::Abs(dcaZ)<1.0*/);
}
#endif
